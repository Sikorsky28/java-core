package ru.mentee.power.conditions;

import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class RockPaperScissors {

    // üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ö–æ–¥–æ–≤
    public static final String ROCK = "–ö–∞–º–µ–Ω—å";
    public static final String PAPER = "–ë—É–º–∞–≥–∞";
    public static final String SCISSORS = "–ù–æ–∂–Ω–∏—Ü—ã";

    // üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–≥—Ä—ã
    public static final String PLAYER_WINS = "–ü–æ–±–µ–¥–∞ –∏–≥—Ä–æ–∫–∞";
    public static final String COMPUTER_WINS = "–ü–æ–±–µ–¥–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞";
    public static final String DRAW = "–ù–∏—á—å—è";
    public static final String ERROR = "–û—à–∏–±–∫–∞";

    // üîπ –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ö–æ–¥—ã
    private static final List<String> VALID_MOVES = Arrays.asList(ROCK, PAPER, SCISSORS);

    private final Random random = new Random(); // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ö–æ–¥ –∏–≥—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–æ–¥–æ–≤ –∏–≥—Ä–æ–∫–∞ –∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
     *
     * @param playerMove   –•–æ–¥ –∏–≥—Ä–æ–∫–∞
     * @param computerMove –•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
     * @return –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã (PLAYER_WINS, COMPUTER_WINS, DRAW –∏–ª–∏ ERROR)
     */
    public String determineWinner(String playerMove, String computerMove) {
        if (!validateMove(playerMove) || !validateMove(computerMove)) {
            return ERROR; // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ö–æ–¥–∞
        }

        if (playerMove.equalsIgnoreCase(computerMove)) {
            return DRAW; // üîπ –ï—Å–ª–∏ –≤—ã–±–æ—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç ‚Äî –Ω–∏—á—å—è
        }

        switch (playerMove) {
            case ROCK:
                return (computerMove.equalsIgnoreCase(SCISSORS)) ? PLAYER_WINS : COMPUTER_WINS;
            case SCISSORS:
                return (computerMove.equalsIgnoreCase(PAPER)) ? PLAYER_WINS : COMPUTER_WINS;
            case PAPER:
                return (computerMove.equalsIgnoreCase(ROCK)) ? PLAYER_WINS : COMPUTER_WINS;
            default:
                return ERROR;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ö–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º—ã–º.
     *
     * @param move –•–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @return true, –µ—Å–ª–∏ —Ö–æ–¥ –¥–æ–ø—É—Å—Ç–∏–º, –∏–Ω–∞—á–µ false
     */
    private boolean validateMove(String move) {
        return VALID_MOVES.contains(move);
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.
     *
     * @return –°–ª—É—á–∞–π–Ω—ã–π —Ö–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ VALID_MOVES.
     */
    public String generateComputerMove() {
        int randomIndex = random.nextInt(VALID_MOVES.size());
        return VALID_MOVES.get(randomIndex);
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä–æ–≤—É—é —Å–µ—Å—Å–∏—é.
     */
    public void playOneGame() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("–í–∞—à —Ö–æ–¥ (–ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞): ");
        String playerMove = scanner.nextLine().trim();

        if (!validateMove(playerMove)) {
            System.out.println(ERROR);
            return;
        }

        String computerMove = generateComputerMove();
        System.out.println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª: " + computerMove);

        String result = determineWinner(playerMove, computerMove);
        System.out.println(result); // –ü—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–æ–Ω—Å–æ–ª—å
    }


    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª.
     */
    public void startGameLoop() {
        Scanner scanner = new Scanner(System.in);
        int playerWins = 0;
        int computerWins = 0;
        int draws = 0;

        System.out.println("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É \"–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞\"!");
        System.out.println("–í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞.");
        System.out.println("–í–≤–µ–¥–∏—Ç–µ \"–í—ã—Ö–æ–¥\", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É.");

        while (true) {
            System.out.println("\n–í–∞—à —Ö–æ–¥: ");
            String playerMove = scanner.nextLine().trim();

            if (playerMove.equalsIgnoreCase("–í—ã—Ö–æ–¥")) {
                System.out.println("\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
                System.out.println("–ü–æ–±–µ–¥—ã –∏–≥—Ä–æ–∫–∞: " + playerWins);
                System.out.println("–ü–æ–±–µ–¥—ã –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: " + computerWins);
                System.out.println("–ù–∏—á—å–∏: " + draws);
                break;
            }

            if (!validateMove(playerMove)) {
                System.out.println(ERROR);
                continue;
            }

            String computerMove = generateComputerMove();
            System.out.println("–ö–æ–º–ø—å—é—Ç–µ—Ä –≤—ã–±—Ä–∞–ª: " + computerMove);

            String result = determineWinner(playerMove, computerMove);

            if (result.equals(PLAYER_WINS)) {
                playerWins++;
            } else if (result.equals(COMPUTER_WINS)) {
                computerWins++;
            } else {
                draws++;
            }

            System.out.println(result);
        }

        scanner.close();
    }

    /**
     * –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –∏–≥—Ä—É.
     */
    public static void main(String[] args) {
        RockPaperScissors game = new RockPaperScissors();
        game.startGameLoop(); // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
    }
}
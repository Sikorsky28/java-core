package ru.mentee.power.conditions;

import java.time.Year;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class CarEcoRating {

    // üîπ –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    private static final int ERROR_CODE = -1;
    private static final int MIN_RATING = 1;
    private static final int MAX_RATING = 100;
    private static final int EURO_STANDARD_YEAR_THRESHOLD = 2020;

    private static final int BASE_RATING_ELECTRIC = 90;
    private static final int BASE_RATING_HYBRID = 70;
    private static final int BASE_RATING_DIESEL = 40;
    private static final int BASE_RATING_PETROL = 30;

    private static final List<String> VALID_FUEL_TYPES = Arrays.asList("–ë–µ–Ω–∑–∏–Ω", "–î–∏–∑–µ–ª—å", "–ì–∏–±—Ä–∏–¥", "–≠–ª–µ–∫—Ç—Ä–æ");


    public int calculateEcoRating(String fuelType, double engineVolume,
                                  double fuelConsumption, int yearOfManufacture,
                                  boolean isEuroCompliant) {
        if (!validateInput(fuelType, engineVolume, fuelConsumption, yearOfManufacture)) {
            return ERROR_CODE;
        }

        int baseFuelRating = getBaseFuelTypeRating(fuelType);
        int modifiedRating = applyRatingModifiers(baseFuelRating, fuelType, engineVolume, fuelConsumption, yearOfManufacture, isEuroCompliant);
        return clampRating(modifiedRating);
    }


    private boolean validateInput(String fuelType, double engineVolume, double fuelConsumption, int yearOfManufacture) {
        int currentYear = Year.now().getValue();
        return VALID_FUEL_TYPES.contains(fuelType) &&
                engineVolume >= 0 &&
                fuelConsumption >= 0 &&
                yearOfManufacture >= 1900 && yearOfManufacture <= currentYear;
    }


    private int getBaseFuelTypeRating(String fuelType) {
        switch (fuelType) {
            case "–ë–µ–Ω–∑–∏–Ω": return BASE_RATING_PETROL;
            case "–î–∏–∑–µ–ª—å": return BASE_RATING_DIESEL;
            case "–ì–∏–±—Ä–∏–¥": return BASE_RATING_HYBRID;
            case "–≠–ª–µ–∫—Ç—Ä–æ": return BASE_RATING_ELECTRIC;
            default: return ERROR_CODE;
        }
    }


    private int applyRatingModifiers(int baseRating, String fuelType, double engineVolume,
                                     double fuelConsumption, int yearOfManufacture, boolean isEuroCompliant) {
        int totalRating = baseRating;

        if (fuelType.equals("–ë–µ–Ω–∑–∏–Ω") || fuelType.equals("–î–∏–∑–µ–ª—å")) {
            totalRating -= (int) (engineVolume * 5);
        }

        if (fuelType.equals("–ë–µ–Ω–∑–∏–Ω") || fuelType.equals("–î–∏–∑–µ–ª—å")) {
            totalRating -= (int) (fuelConsumption * 2);
        }

        if (fuelType.equals("–≠–ª–µ–∫—Ç—Ä–æ")) {
            totalRating -= (int) (fuelConsumption * 0.5);
        }

        if (yearOfManufacture < EURO_STANDARD_YEAR_THRESHOLD) {
            totalRating -= (EURO_STANDARD_YEAR_THRESHOLD - yearOfManufacture);
        }

        if (isEuroCompliant && (fuelType.equals("–ë–µ–Ω–∑–∏–Ω") || fuelType.equals("–î–∏–∑–µ–ª—å") || fuelType.equals("–≠–ª–µ–∫—Ç—Ä–æ"))) {
            totalRating += 10;
        }

        if (fuelType.equals("–ì–∏–±—Ä–∏–¥") && fuelConsumption < 5) {
            totalRating += 15;
        }

        System.out.println("–†–µ–π—Ç–∏–Ω–≥ –ø–æ—Å–ª–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π: " + totalRating);
        System.out.println("–ü–µ—Ä–µ–¥ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º: " + Math.round(totalRating));

        return (int) Math.round(totalRating);
    }


    private int clampRating(int rating) {
        return Math.max(MIN_RATING, Math.min(MAX_RATING, rating));
    }

    public static void main(String[] args) {
        CarEcoRating ecoRating = new CarEcoRating();
        Scanner scanner = new Scanner(System.in);

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (–ë–µ–Ω–∑–∏–Ω, –î–∏–∑–µ–ª—å, –ì–∏–±—Ä–∏–¥, –≠–ª–µ–∫—Ç—Ä–æ):");
        String type = scanner.next();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –¥–≤–∏–≥–∞—Ç–µ–ª—è (–ª):");
        double volume = scanner.nextDouble();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ (–ª/100–∫–º):");
        double consumption = scanner.nextDouble();

        System.out.println("–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:");
        int year = scanner.nextInt();

        System.out.println("–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ï–≤—Ä–æ-6? (true/false):");
        boolean isEuro = scanner.nextBoolean();

        int rating = ecoRating.calculateEcoRating(type, volume, consumption, year, isEuro);

        if (rating == ERROR_CODE) {
            System.out.println("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!");
        } else {
            System.out.println("–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: " + rating);
        }

        scanner.close();
    }
}

package ru.mentee.power.loop;

import java.util.Random;
import java.util.Scanner;

public class NumberGuessingGame {
    private final Random random;
    private final Scanner scanner = new Scanner(System.in);
    private int gamesPlayed = 0;
    private int minAttempts = Integer.MAX_VALUE;
    private int maxAttempts = 0;
    private int totalAttempts = 0;

    public NumberGuessingGame() {
        this.random = createRandom();
    }

    protected Random createRandom() {
        return new Random();
    }

    public void startGame() {
        do {
            int attempts = playRound();  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—É–Ω–¥
            if (attempts > 0) {
                updateStatistics(attempts);  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            }
            showStatistics();  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } while (askPlayAgain());  // üî• –ï—Å–ª–∏ "–¥–∞", –∏–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è
    }



    public int playRound() {
        // –ó–∞–≥–∞–¥—ã–≤–∞–µ–º —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100
        int secretNumber = random.nextInt(100) + 1;
        int attempts = 0;
        boolean guessed = false;

        System.out.println("–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≥–∞–¥–∞—Ç—å!");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º do-while, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É
        do {
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–∏–ª–∏ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞

            if (!scanner.hasNextLine()) {
                System.out.println("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
                return -1;
            }

            String input = scanner.nextLine();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–π—Ç–∏
            if (input.equalsIgnoreCase("q") || input.equalsIgnoreCase("quit")) {
                System.out.println("–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: " + secretNumber);
                return attempts;
            }

            // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤–≤–æ–¥ –≤ —á–∏—Å–ª–æ
            int guess;
            try {
                guess = Integer.parseInt(input);
            } catch (NumberFormatException e) {
                System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ!");
                continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            if (guess < 1 || guess > 100) {
                System.out.println("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 100!");
                continue;
            }

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
            attempts++;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–≥–∞–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if (guess == secretNumber) {
                System.out.println("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ " + secretNumber +
                        " –∑–∞ " + attempts + " –ø–æ–ø—ã—Ç–æ–∫.");
                guessed = true;
            } else if (guess < secretNumber) {
                System.out.println("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!");
            } else {
                System.out.println("–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!");
            }

        } while (!guessed);

        return attempts;
    }
    private void updateStatistics(int attempts) {
        if (attempts > 0) {
            gamesPlayed++;
            minAttempts = Math.min(minAttempts, attempts);
            maxAttempts = Math.max(maxAttempts, attempts);
            totalAttempts += attempts;
        }
    }

    public void showStatistics() {
        if (gamesPlayed > 0) {
            System.out.println("============== –°–¢–ê–¢–ò–°–¢–ò–ö–ê ==============");
            System.out.println("–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: " + gamesPlayed);
            System.out.println("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: " + minAttempts);
            System.out.println("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: " + maxAttempts);
            System.out.printf("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: %.2f%n", (double) totalAttempts / gamesPlayed);
            System.out.println("========================================");
        }
    }

    private boolean askPlayAgain() {
        System.out.print("–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (–¥–∞/–Ω–µ—Ç): ");

        if (!scanner.hasNextLine()) {  // üî• –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–≤–æ–¥
            System.out.println("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!");
            return false;
        }

        String answer = scanner.nextLine().trim().toLowerCase();
        return answer.equals("–¥–∞") || answer.equals("yes") || answer.equals("y");
    }


    public void close() {
        scanner.close();
    }

    public static void main(String[] args) {
        NumberGuessingGame game = new NumberGuessingGame();
        try {
            game.startGame();
        } finally {
            game.close();
        }
    }
}
